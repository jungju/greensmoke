//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:2.0.50727.1378
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GreenSmokeMonitor.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Item")]
    [System.SerializableAttribute()]
    public partial class Group : GreenSmokeMonitor.ServiceReference.UseSubItem {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiStrip", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Item")]
    [System.SerializableAttribute()]
    public partial class MultiStrip : GreenSmokeMonitor.ServiceReference.ManagePhysicalParentConnectItem {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GreenSmokeObject", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.GreenSmokeItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.DefineItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.UseChildPolicy))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.CategoryOnItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.PolicyChild))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.ManagePhysicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Product))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.ManagePhysicalParentConnectItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.MultiStrip))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Adaptor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.UseSubItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Manager))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Group))]
    public partial class GreenSmokeObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GreenSmokeItem", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.DefineItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.UseChildPolicy))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.CategoryOnItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.PolicyChild))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.ManagePhysicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Product))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.ManagePhysicalParentConnectItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.MultiStrip))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Adaptor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.UseSubItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Manager))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Group))]
    public partial class GreenSmokeItem : GreenSmokeMonitor.ServiceReference.GreenSmokeObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DefineItem", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.UseChildPolicy))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.CategoryOnItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.PolicyChild))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.ManagePhysicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Product))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.ManagePhysicalParentConnectItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.MultiStrip))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Adaptor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.UseSubItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Manager))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Group))]
    public partial class DefineItem : GreenSmokeMonitor.ServiceReference.GreenSmokeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImagePath {
            get {
                return this.ImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagePathField, value) != true)) {
                    this.ImagePathField = value;
                    this.RaisePropertyChanged("ImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UseChildPolicy", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core")]
    [System.SerializableAttribute()]
    public partial class UseChildPolicy : GreenSmokeMonitor.ServiceReference.DefineItem {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryOnItem", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.PolicyChild))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.ManagePhysicalItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Product))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.ManagePhysicalParentConnectItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.MultiStrip))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Adaptor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.UseSubItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Manager))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Group))]
    public partial class CategoryOnItem : GreenSmokeMonitor.ServiceReference.DefineItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Category> CategoryItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Category> CategoryItems {
            get {
                return this.CategoryItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryItemsField, value) != true)) {
                    this.CategoryItemsField = value;
                    this.RaisePropertyChanged("CategoryItems");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PolicyChild", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core")]
    [System.SerializableAttribute()]
    public partial class PolicyChild : GreenSmokeMonitor.ServiceReference.CategoryOnItem {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManagePhysicalItem", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Product))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.ManagePhysicalParentConnectItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.MultiStrip))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Adaptor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.UseSubItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Manager))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Group))]
    public partial class ManagePhysicalItem : GreenSmokeMonitor.ServiceReference.CategoryOnItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ConnectedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenSmokeMonitor.ServiceReference.EnumItem CurrentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DisconnectedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConnectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPowerOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSafeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ConnectedTime {
            get {
                return this.ConnectedTimeField;
            }
            set {
                if ((this.ConnectedTimeField.Equals(value) != true)) {
                    this.ConnectedTimeField = value;
                    this.RaisePropertyChanged("ConnectedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenSmokeMonitor.ServiceReference.EnumItem CurrentType {
            get {
                return this.CurrentTypeField;
            }
            set {
                if ((this.CurrentTypeField.Equals(value) != true)) {
                    this.CurrentTypeField = value;
                    this.RaisePropertyChanged("CurrentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DisconnectedTime {
            get {
                return this.DisconnectedTimeField;
            }
            set {
                if ((this.DisconnectedTimeField.Equals(value) != true)) {
                    this.DisconnectedTimeField = value;
                    this.RaisePropertyChanged("DisconnectedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected {
            get {
                return this.IsConnectedField;
            }
            set {
                if ((this.IsConnectedField.Equals(value) != true)) {
                    this.IsConnectedField = value;
                    this.RaisePropertyChanged("IsConnected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnable {
            get {
                return this.IsEnableField;
            }
            set {
                if ((this.IsEnableField.Equals(value) != true)) {
                    this.IsEnableField = value;
                    this.RaisePropertyChanged("IsEnable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPowerOn {
            get {
                return this.IsPowerOnField;
            }
            set {
                if ((this.IsPowerOnField.Equals(value) != true)) {
                    this.IsPowerOnField = value;
                    this.RaisePropertyChanged("IsPowerOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSafe {
            get {
                return this.IsSafeField;
            }
            set {
                if ((this.IsSafeField.Equals(value) != true)) {
                    this.IsSafeField = value;
                    this.RaisePropertyChanged("IsSafe");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Item")]
    [System.SerializableAttribute()]
    public partial class Product : GreenSmokeMonitor.ServiceReference.ManagePhysicalItem {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManagePhysicalParentConnectItem", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.MultiStrip))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Adaptor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.UseSubItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Manager))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Group))]
    public partial class ManagePhysicalParentConnectItem : GreenSmokeMonitor.ServiceReference.ManagePhysicalItem {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Adaptor", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Item")]
    [System.SerializableAttribute()]
    public partial class Adaptor : GreenSmokeMonitor.ServiceReference.ManagePhysicalParentConnectItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenSmokeMonitor.ServiceReference.Product ConnectedProductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenSmokeMonitor.ServiceReference.EnumPowerStateMode CurrentPowerStateModeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenSmokeMonitor.ServiceReference.Product ConnectedProduct {
            get {
                return this.ConnectedProductField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectedProductField, value) != true)) {
                    this.ConnectedProductField = value;
                    this.RaisePropertyChanged("ConnectedProduct");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenSmokeMonitor.ServiceReference.EnumPowerStateMode CurrentPowerStateMode {
            get {
                return this.CurrentPowerStateModeField;
            }
            set {
                if ((this.CurrentPowerStateModeField.Equals(value) != true)) {
                    this.CurrentPowerStateModeField = value;
                    this.RaisePropertyChanged("CurrentPowerStateMode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UseSubItem", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Category))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Manager))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenSmokeMonitor.ServiceReference.Group))]
    public partial class UseSubItem : GreenSmokeMonitor.ServiceReference.ManagePhysicalParentConnectItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenSmokeMonitor.ServiceReference.UseSubItem ParentSubItemField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenSmokeMonitor.ServiceReference.UseSubItem ParentSubItem {
            get {
                return this.ParentSubItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentSubItemField, value) != true)) {
                    this.ParentSubItemField = value;
                    this.RaisePropertyChanged("ParentSubItem");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Manager", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Item")]
    [System.SerializableAttribute()]
    public partial class Manager : GreenSmokeMonitor.ServiceReference.UseSubItem {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Item")]
    [System.SerializableAttribute()]
    public partial class Category : GreenSmokeMonitor.ServiceReference.UseSubItem {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnumItem", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Item")]
    public enum EnumItem : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Group = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultiStrip = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Adaptor = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Product = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manager = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CategoryItem = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnumPowerStateMode", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Item")]
    public enum EnumPowerStateMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Idle = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sleep = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknow = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnumControl", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Item")]
    public enum EnumControl : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PowerOn = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PowerOff = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enable = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disenable = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Safe = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unsafe = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnumPolicy", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Item")]
    public enum EnumPolicy : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scenario = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Supervision = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnumCTValueMode", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Policy")]
    public enum EnumCTValueMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Eqaul = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnumProcessMode", Namespace="http://schemas.datacontract.org/2004/07/GreenSmoke.Core.Policy")]
    public enum EnumProcessMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Alert = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlertAndPowerOff = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PowerOff = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ILocal")]
    public interface ILocal {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemInformation/GetGroupList", ReplyAction="http://tempuri.org/IItemInformation/GetGroupListResponse")]
        System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Group> GetGroupList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemInformation/GetMultiStripList", ReplyAction="http://tempuri.org/IItemInformation/GetMultiStripListResponse")]
        System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.MultiStrip> GetMultiStripList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemInformation/GetManagerList", ReplyAction="http://tempuri.org/IItemInformation/GetManagerListResponse")]
        System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Manager> GetManagerList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemInformation/GetAdaptorList", ReplyAction="http://tempuri.org/IItemInformation/GetAdaptorListResponse")]
        System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Adaptor> GetAdaptorList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemInformation/GetCategoryList", ReplyAction="http://tempuri.org/IItemInformation/GetCategoryListResponse")]
        System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Category> GetCategoryList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemInformation/GetProductList", ReplyAction="http://tempuri.org/IItemInformation/GetProductListResponse")]
        System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Product> GetProductList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyInformation/GetPolicyItem", ReplyAction="http://tempuri.org/IPolicyInformation/GetPolicyItemResponse")]
        System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.UseChildPolicy> GetPolicyItem();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyInformation/GetPolicyChildrenItems", ReplyAction="http://tempuri.org/IPolicyInformation/GetPolicyChildrenItemsResponse")]
        System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.PolicyChild> GetPolicyChildrenItems(string policyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticate/Authenticator", ReplyAction="http://tempuri.org/IAuthenticate/AuthenticatorResponse")]
        bool Authenticator(string managerName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlItem/ItemControl", ReplyAction="http://tempuri.org/IControlItem/ItemControlResponse")]
        void ItemControl(GreenSmokeMonitor.ServiceReference.EnumControl currentControl, string itemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagePolicy/CreatePolicy", ReplyAction="http://tempuri.org/IManagePolicy/CreatePolicyResponse")]
        void CreatePolicy(string name, GreenSmokeMonitor.ServiceReference.EnumPolicy kindPolicy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagePolicy/RemovePolicy", ReplyAction="http://tempuri.org/IManagePolicy/RemovePolicyResponse")]
        void RemovePolicy(string policyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagePolicy/AddScenarioItem", ReplyAction="http://tempuri.org/IManagePolicy/AddScenarioItemResponse")]
        void AddScenarioItem(string scenarioID, string name, System.Nullable<System.DateTime> offTime, System.Nullable<System.DateTime> onTime, System.Nullable<System.TimeSpan> pauseTimeSpan, System.Nullable<System.TimeSpan> playTimeSpan, string[] categoryItemsID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagePolicy/AddSupervisionItem", ReplyAction="http://tempuri.org/IManagePolicy/AddSupervisionItemResponse")]
        void AddSupervisionItem(string supervisionID, string name, int criticalValue, System.TimeSpan runningSpan, GreenSmokeMonitor.ServiceReference.EnumCTValueMode valueMode, GreenSmokeMonitor.ServiceReference.EnumProcessMode processMode, string[] categoryItemsID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagePolicy/RemovePolicyChildItem", ReplyAction="http://tempuri.org/IManagePolicy/RemovePolicyChildItemResponse")]
        void RemovePolicyChildItem(string policyID, string policyChildItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegisterProduct/RegisterProduct", ReplyAction="http://tempuri.org/IRegisterProduct/RegisterProductResponse")]
        void RegisterProduct(string productID, string strProductImagePath, string strName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorItem/GetAdaptorsCT", ReplyAction="http://tempuri.org/IMonitorItem/GetAdaptorsCTResponse")]
        string GetAdaptorsCT();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/CreateGroup", ReplyAction="http://tempuri.org/IManageItem/CreateGroupResponse")]
        void CreateGroup(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/DeleteGroup", ReplyAction="http://tempuri.org/IManageItem/DeleteGroupResponse")]
        void DeleteGroup(string groupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/CreateCategoryItem", ReplyAction="http://tempuri.org/IManageItem/CreateCategoryItemResponse")]
        void CreateCategoryItem(string categoryID, string name, string ImagePath, GreenSmokeMonitor.ServiceReference.EnumItem currentItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/DeleteCategoryItem", ReplyAction="http://tempuri.org/IManageItem/DeleteCategoryItemResponse")]
        void DeleteCategoryItem(string categoryItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/CreateManager", ReplyAction="http://tempuri.org/IManageItem/CreateManagerResponse")]
        void CreateManager(string managerID, string managerName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/DeleteManager", ReplyAction="http://tempuri.org/IManageItem/DeleteManagerResponse")]
        void DeleteManager(string managerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/AddCategoryItem", ReplyAction="http://tempuri.org/IManageItem/AddCategoryItemResponse")]
        void AddCategoryItem(string parentItemID, string childItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/RemoveCategoryItem", ReplyAction="http://tempuri.org/IManageItem/RemoveCategoryItemResponse")]
        void RemoveCategoryItem(string parentItemID, string childItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/AddSubItem", ReplyAction="http://tempuri.org/IManageItem/AddSubItemResponse")]
        void AddSubItem(string parentItemID, string subItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/RemoveSubItem", ReplyAction="http://tempuri.org/IManageItem/RemoveSubItemResponse")]
        void RemoveSubItem(string parentItemID, string subItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/AddManager", ReplyAction="http://tempuri.org/IManageItem/AddManagerResponse")]
        void AddManager(string itemID, string managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageItem/RemoveManager", ReplyAction="http://tempuri.org/IManageItem/RemoveManagerResponse")]
        void RemoveManager(string itemID, string managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocal/TestService", ReplyAction="http://tempuri.org/ILocal/TestServiceResponse")]
        string TestService(string clientMessase);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ILocalChannel : GreenSmokeMonitor.ServiceReference.ILocal, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class LocalClient : System.ServiceModel.ClientBase<GreenSmokeMonitor.ServiceReference.ILocal>, GreenSmokeMonitor.ServiceReference.ILocal {
        
        public LocalClient() {
        }
        
        public LocalClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LocalClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocalClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocalClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Group> GetGroupList() {
            return base.Channel.GetGroupList();
        }
        
        public System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.MultiStrip> GetMultiStripList() {
            return base.Channel.GetMultiStripList();
        }
        
        public System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Manager> GetManagerList() {
            return base.Channel.GetManagerList();
        }
        
        public System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Adaptor> GetAdaptorList() {
            return base.Channel.GetAdaptorList();
        }
        
        public System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Category> GetCategoryList() {
            return base.Channel.GetCategoryList();
        }
        
        public System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.Product> GetProductList() {
            return base.Channel.GetProductList();
        }
        
        public System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.UseChildPolicy> GetPolicyItem() {
            return base.Channel.GetPolicyItem();
        }
        
        public System.Collections.Generic.Dictionary<string, GreenSmokeMonitor.ServiceReference.PolicyChild> GetPolicyChildrenItems(string policyID) {
            return base.Channel.GetPolicyChildrenItems(policyID);
        }
        
        public bool Authenticator(string managerName, string password) {
            return base.Channel.Authenticator(managerName, password);
        }
        
        public void ItemControl(GreenSmokeMonitor.ServiceReference.EnumControl currentControl, string itemID) {
            base.Channel.ItemControl(currentControl, itemID);
        }
        
        public void CreatePolicy(string name, GreenSmokeMonitor.ServiceReference.EnumPolicy kindPolicy) {
            base.Channel.CreatePolicy(name, kindPolicy);
        }
        
        public void RemovePolicy(string policyID) {
            base.Channel.RemovePolicy(policyID);
        }
        
        public void AddScenarioItem(string scenarioID, string name, System.Nullable<System.DateTime> offTime, System.Nullable<System.DateTime> onTime, System.Nullable<System.TimeSpan> pauseTimeSpan, System.Nullable<System.TimeSpan> playTimeSpan, string[] categoryItemsID) {
            base.Channel.AddScenarioItem(scenarioID, name, offTime, onTime, pauseTimeSpan, playTimeSpan, categoryItemsID);
        }
        
        public void AddSupervisionItem(string supervisionID, string name, int criticalValue, System.TimeSpan runningSpan, GreenSmokeMonitor.ServiceReference.EnumCTValueMode valueMode, GreenSmokeMonitor.ServiceReference.EnumProcessMode processMode, string[] categoryItemsID) {
            base.Channel.AddSupervisionItem(supervisionID, name, criticalValue, runningSpan, valueMode, processMode, categoryItemsID);
        }
        
        public void RemovePolicyChildItem(string policyID, string policyChildItemID) {
            base.Channel.RemovePolicyChildItem(policyID, policyChildItemID);
        }
        
        public void RegisterProduct(string productID, string strProductImagePath, string strName) {
            base.Channel.RegisterProduct(productID, strProductImagePath, strName);
        }
        
        public string GetAdaptorsCT() {
            return base.Channel.GetAdaptorsCT();
        }
        
        public void CreateGroup(string name) {
            base.Channel.CreateGroup(name);
        }
        
        public void DeleteGroup(string groupID) {
            base.Channel.DeleteGroup(groupID);
        }
        
        public void CreateCategoryItem(string categoryID, string name, string ImagePath, GreenSmokeMonitor.ServiceReference.EnumItem currentItem) {
            base.Channel.CreateCategoryItem(categoryID, name, ImagePath, currentItem);
        }
        
        public void DeleteCategoryItem(string categoryItemID) {
            base.Channel.DeleteCategoryItem(categoryItemID);
        }
        
        public void CreateManager(string managerID, string managerName, string password) {
            base.Channel.CreateManager(managerID, managerName, password);
        }
        
        public void DeleteManager(string managerID) {
            base.Channel.DeleteManager(managerID);
        }
        
        public void AddCategoryItem(string parentItemID, string childItemID) {
            base.Channel.AddCategoryItem(parentItemID, childItemID);
        }
        
        public void RemoveCategoryItem(string parentItemID, string childItemID) {
            base.Channel.RemoveCategoryItem(parentItemID, childItemID);
        }
        
        public void AddSubItem(string parentItemID, string subItemID) {
            base.Channel.AddSubItem(parentItemID, subItemID);
        }
        
        public void RemoveSubItem(string parentItemID, string subItemID) {
            base.Channel.RemoveSubItem(parentItemID, subItemID);
        }
        
        public void AddManager(string itemID, string managerId) {
            base.Channel.AddManager(itemID, managerId);
        }
        
        public void RemoveManager(string itemID, string managerId) {
            base.Channel.RemoveManager(itemID, managerId);
        }
        
        public string TestService(string clientMessase) {
            return base.Channel.TestService(clientMessase);
        }
    }
}
